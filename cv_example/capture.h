#ifndef CAPTURE_H
#define CAPTURE_H

#include <QObject>

#include <iostream> // for standard I/O
#include <string>   // for strings
#include <iomanip>  // for controlling float print precision
#include <sstream>  // string to number conversion

#include <opencv2/core/core.hpp>        // Basic OpenCV structures (cv::Mat, Scalar)
#include <opencv2/imgproc/imgproc.hpp>  // Gaussian Blur
#include <opencv2/videoio/videoio.hpp>
#include <opencv2/highgui/highgui.hpp>  // OpenCV window I/O
#include "opencv2/objdetect/objdetect.hpp"


#include <opencv2/video/background_segm.hpp>

#include "cannyfilter.h"

class Capture
{
public:
    Capture();
    int initVideo(int, const std::string);
    void BackgroundSubtract(int deviceID, const std::string ipcam);

private:
    int lowThreshold;
    cv::TrackbarCallback change = 0;
    CannyFilter* cf;

    cv::VideoCapture captRefrnc;
    cv::VideoWriter outputVideo;

    double doBS(cv::Mat *src, cv::Mat *mask, int totalPix);

    cv::Ptr<cv::BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
    cv::Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
    cv::Mat lastImage;

    const std::string SAVE_PATH = "C://Users/usjaghi41/Documents/GitHub/OpenCV/cv_example/motion/";
    std::string vidPath = "C://Users/usjaghi41/Documents/GitHub/OpenCV/cv_example/motion/video.mov";


    void detectAndDisplay(cv::Mat &frame );
    std::string face_cascade_name = "C://Users/usjaghi41/Documents/OpenCV/opencv/sources/data/haarcascades_cuda/haarcascade_frontalface_alt.xml";
    std::string eyes_cascade_name = "C://Users/usjaghi41/Documents/OpenCV/opencv/sources/data/haarcascades_cuda/haarcascade_eye_tree_eyeglasses.xml";
    cv::CascadeClassifier face_cascade;
    cv::CascadeClassifier eyes_cascade;

};

#endif // CAPTURE_H
